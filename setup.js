#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { createInterface } from 'readline';

const rl = createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setup() {
  console.log('🚀 GoHighLevel MCP Client Setup');
  console.log('=' .repeat(50));
  console.log('This setup will help you configure your GoHighLevel MCP client.');
  console.log('');
  
  try {
    // Check if .env already exists
    const envPath = path.join(process.cwd(), '.env');
    const envExamplePath = path.join(process.cwd(), '.env.example');
    
    if (fs.existsSync(envPath)) {
      const overwrite = await question('⚠️  .env file already exists. Overwrite? (y/N): ');
      if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
        console.log('Setup cancelled. Your existing .env file was not modified.');
        rl.close();
        return;
      }
    }
    
    console.log('');
    console.log('📋 Please provide the following information:');
    console.log('');
    
    // Get Private Integration Token
    console.log('1. Private Integration Token');
    console.log('   Get this from Settings > Private Integrations in GoHighLevel');
    console.log('   It should start with "pit-"');
    const token = await question('   Enter your Private Integration Token: ');
    
    if (!token || !token.startsWith('pit-')) {
      console.log('⚠️  Warning: Token should start with "pit-". Please verify this is correct.');
    }
    
    console.log('');
    
    // Get Location ID
    console.log('2. Location ID (Sub-account ID)');
    console.log('   This is your GoHighLevel location/sub-account identifier');
    console.log('   You can find this in your GoHighLevel URL or account settings');
    const locationId = await question('   Enter your Location ID: ');
    
    console.log('');
    
    // Optional settings
    console.log('3. Optional Settings (press Enter for defaults)');
    const port = await question('   HTTP Server Port (default: 3000): ') || '3000';
    const host = await question('   HTTP Server Host (default: localhost): ') || 'localhost';
    const debug = await question('   Enable debug mode? (y/N): ');
    
    // Create .env content
    const envContent = `# GoHighLevel MCP Client Configuration
# Generated by setup script on ${new Date().toISOString()}

# GoHighLevel Private Integration Token
# Get this from Settings > Private Integrations in your GoHighLevel account
GHL_PRIVATE_INTEGRATION_TOKEN=${token}

# GoHighLevel Location ID (Sub-account ID)
# This is your specific location/sub-account identifier
GHL_LOCATION_ID=${locationId}

# MCP Server Configuration
GHL_MCP_URL=https://services.leadconnectorhq.com/mcp/

# Local server configuration
PORT=${port}
HOST=${host}

# Debug mode
DEBUG=${debug.toLowerCase() === 'y' || debug.toLowerCase() === 'yes' ? 'true' : 'false'}
`;
    
    // Write .env file
    fs.writeFileSync(envPath, envContent);
    
    console.log('');
    console.log('✅ Configuration saved to .env file');
    console.log('');
    
    // Test connection
    console.log('🧪 Testing connection...');
    console.log('');
    
    try {
      // Import and test the client
      const { default: GoHighLevelMCPClient } = await import('./index.js');
      const client = new GoHighLevelMCPClient();
      const result = await client.testConnection();
      
      if (result.success) {
        console.log('🎉 Setup completed successfully!');
        console.log('✅ Connection to GoHighLevel MCP server verified');
        console.log('');
        console.log('Next steps:');
        console.log('  • Run "npm test" to run the full test suite');
        console.log('  • Run "node index.js contacts" to get your contacts');
        console.log('  • Run "node index.js server" to start the HTTP server');
        console.log('  • Check README.md for more usage examples');
      } else {
        console.log('❌ Connection test failed');
        console.log('Error:', result.error);
        console.log('');
        console.log('Please check your credentials and try again.');
        console.log('You can run this setup again with: node setup.js');
      }
    } catch (error) {
      console.log('❌ Setup completed but connection test failed');
      console.log('Error:', error.message);
      console.log('');
      console.log('Please verify your credentials and run: node index.js test');
    }
    
  } catch (error) {
    console.log('❌ Setup failed:', error.message);
  } finally {
    rl.close();
  }
}

// Credential validation helper
function validateCredentials() {
  const envPath = path.join(process.cwd(), '.env');
  
  if (!fs.existsSync(envPath)) {
    console.log('❌ No .env file found. Run setup first: node setup.js');
    return false;
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  const lines = envContent.split('\n');
  const config = {};
  
  lines.forEach(line => {
    const [key, value] = line.split('=');
    if (key && value) {
      config[key.trim()] = value.trim();
    }
  });
  
  const issues = [];
  
  if (!config.GHL_PRIVATE_INTEGRATION_TOKEN) {
    issues.push('Missing GHL_PRIVATE_INTEGRATION_TOKEN');
  } else if (!config.GHL_PRIVATE_INTEGRATION_TOKEN.startsWith('pit-')) {
    issues.push('GHL_PRIVATE_INTEGRATION_TOKEN should start with "pit-"');
  }
  
  if (!config.GHL_LOCATION_ID) {
    issues.push('Missing GHL_LOCATION_ID');
  }
  
  if (issues.length > 0) {
    console.log('❌ Configuration issues found:');
    issues.forEach(issue => console.log(`   • ${issue}`));
    console.log('');
    console.log('Run setup again to fix: node setup.js');
    return false;
  }
  
  console.log('✅ Configuration looks good!');
  return true;
}

// Main function
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  
  switch (command) {
    case 'validate':
      validateCredentials();
      break;
    case 'help':
      console.log('GoHighLevel MCP Client Setup');
      console.log('');
      console.log('Commands:');
      console.log('  node setup.js          - Run interactive setup');
      console.log('  node setup.js validate - Validate existing configuration');
      console.log('  node setup.js help     - Show this help');
      break;
    default:
      await setup();
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
